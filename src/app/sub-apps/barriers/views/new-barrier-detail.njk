{% from 'components/back-link/macro.njk' import govukBackLink %}
{% from 'components/error-summary/macro.njk' import govukErrorSummary %}
{% from 'app-components/barrier-summary.njk' import barrierSummary %}
{% from 'app-components/summary-group.njk' import summaryGroup %}
{% from "components/textarea/macro.njk" import govukTextarea %}
{% from "components/file-upload/macro.njk" import govukFileUpload %}

{% extends 'layout.njk' %}

{% block body_script %}
	<script>
		if( ma.components.BarrierSummary ){
			new ma.components.BarrierSummary( {
				text: 'Update the barrier',
				linkClass: '.js-barrier-summary-link'
			} );
		}
	</script>
{% endblock %}

{% block mastheadContent %}
    {{ barrierSummary( barrier ) }}
{% endblock %}


{% block page_content %}
    {{ summaryGroup( {
		heading: {
			level: ( 3 if barrier.isResolved or barrier.isHibernated else 2 ),
			text: 'Barrier headlines'
		},
		items: [
            {
				title: 'Last Modified',
				html: barrier.modifiedOn | dateOnly | escape | nl2br,
                halfWidth: true
			},{
				title: 'Date added',
				html: barrier.reportedOn | dateOnly | escape | nl2br,
                halfWidth: true
			},{
				title: 'Summary of the problem',
				html: barrier.problem.description | escape | nl2br,
				edit: {
					href: urls.barriers.edit.description( barrier.id )
				}
			},{
				title: 'Barrier urgency',
				html: barrier.problem.status | escape | nl2br
			},{
				title: 'Company or organisation affected',
				items: companiesList if companiesList.length,
				add: {
					text: 'Add one or more companies',
					href: urls.barriers.companies.search( barrier.id )
				},
				edit: {
					href: urls.barriers.companies.edit( barrier.id )
				}
			} if addCompany,
			{
				title: ( 'Sector' + ( 's' if barrier.sectors.length !== 1 ) + ' affected' ),
				items: sectorsList if sectorsList.length,
				add: {
					text: 'Add one or more sectors',
					href: urls.barriers.sectors.new( barrier.id )
				},
				edit: {
					href: urls.barriers.sectors.edit( barrier.id )
				}
			},
			{
				title: 'Market access barrier type',
				heading: {
					text: ( barrier.type.category.name + ':' ) if barrier.type.category.name
				},
				html: barrierTypeHtml if barrier.type.title,
				add: {
					text: 'Add a type of Market Access Barrier',
					href: urls.barriers.type.category( barrier.id )
				},
				edit: {
					href: urls.barriers.type.category( barrier.id )
				}
			},{
				title: 'Product or service being exported or invested',
				text: barrier.product,
				edit: {
					href: urls.barriers.edit.product( barrier.id )
				}
			},{
				title: 'Awareness of the problem',
				html: barrier.source.name + ( ( '<br>' + barrier.source.description ) if barrier.source.description ),
				edit: {
					href: urls.barriers.edit.source( barrier.id )
				}
			},{
				title: 'Initial report made by',
				text: barrier.reportedBy 
			}
		]
	} ) }}
    <section class="barrier-content">
        <h2 class="section-heading">
		Updates and documents
        </h2>
        {% if noteForm %}
		<div class="interaction-panel">
			<form action="{{ urls.barriers.notes.add( barrier.id ) }}?_csrf={{ csrfToken }}" method="POST" enctype="multipart/form-data" data-xhr-upload="{{ urls.barriers.notes.documents.add( barrier.id ) }}?_csrf={{ csrfToken }}" data-xhr-delete="{{ urls.documents.delete( ':uuid' ) }}">

				{{ govukTextarea({
					name: 'note',
					id: 'note',
					classes: 'js-note-text',
					formGroup: {
						classes: 'js-note-group'
					},
					label: {
						text: 'Add notes on an interaction or event',
						classes: 'govuk-!-font-weight-bold'
					},
					attributes: {
						autofocus: ''
					},
					value: note,
					errorMessage: errors | errorForName( 'note' )
				}) }}

				{#{ govukCheckboxes({
					name: 'pinned',
					items: [
						{
							value: 'true',
							text: 'Pin this note to the top of the timeline'
						}
					]
				}) }#}

				{{ govukFileUpload({
					id: 'document',
					name: 'document',
					classes: 'file-upload__input js-file-input',
					formGroup: {
						classes: 'file-upload js-form-group' + ( ' file-upload--hide' if documentId )
					},
					label: {
						text: 'Attach a document',
						classes: 'visually-hidden'
					},
					hint: {
						classes: 'file-upload__size-limit js-max-file-size',
						html: '(file size limit <strong>' + maxFileSize + '</strong>)'
					},
					errorMessage: errors | errorForName( 'document' )
				}) }}

				{% if documentId %}
					<input type="hidden" name="documentId" value="{{ documentId }}" class="js-document-id">
				{% endif %}

				<input type="submit" value="Save note" class="govuk-button js-submit-button">
				<a class="button-cancel" href="{{ urls.barriers.interactions( barrier.id ) }}">Cancel</a>
			</form>
		</div>
	{% else %}
		<a class="govuk-button button--primary" href="{{ urls.barriers.notes.add( barrier.id ) }}">Add note</a>
	{% endif %}

	{% if interactions and interactions.length %}
		<ol class="event-list">
			{% for item in interactions -%}

			<li class="event-list__item{#{ ' event-list__item--pinned' if item.pinned }#}">

				{%- if item.isNote -%}

					<h4 class="event-list__item__heading">{{ item.date | dateOnly }}<span class="event-list__item__heading__recede"> at {{ item.date | time }} (GMT)</span>
						{%- if item.user.name -%}
						<span class="event-list__item__heading__recede"> by </span>{{ item.user.name }}
						{%- endif -%}
					</h4>

					{% if item.edit -%}

						<form action="{{ urls.barriers.notes.edit( barrier.id, item.id ) }}" method="POST">
							<input type="hidden" name="_csrf" value="{{ csrfToken }}">
							{{ govukTextarea({
								name: 'note',
								id: 'note',
								label: {
									text: 'Add notes on an interaction or event',
									classes: 'visually-hidden'
								},
								value: item.text,
								attributes: {
									autofocus: ''
								},
								errorMessage: errors | errorForName( 'note' )
							}) }}

							{%-for document in item.documents %}
								<div class="govuk-form-group file-upload">
									<span class="file-upload__progress"><strong>{{ document.name }}</strong> - {{ document.size }}</span>
									<a href="{{ urls.barriers.notes.documents.delete( barrier.id, item.id, document.id ) }}" class="file-upload__delete">delete</a>
								</div>
							{% endfor %}

							<input type="submit" value="Save note" class="govuk-button">
							<a href="{{ urls.barriers.interactions( barrier.id ) }}" class="form-cancel">Cancel</a>
						</form>

					{%- else -%}

						{% if item.hasDocuments -%}

							<div class="event-list__item__document">
								<ul class="event-list__item__document__list">
									{% for doc in item.documents -%}

										<li class="event-list__item__document__list__item">

											{%- if doc.canDownload -%}

												<a class="event-list__item__document__list__item__name" href="{{ urls.documents.download( doc.id ) }}">{{ doc.name }}</a> - {{ doc.size }}

											{%- else -%}

												<span class="event-list__item__document__list__item__name">{{ doc.name }}</span>
												<span class="event-list__item__document__list__item__status">({{ doc.status }})</span>

											{%- endif %}
										</li>

									{%- endfor %}
								</ul>

								<p class="event-list__item__text">{{ item.text | escape | nl2br  }}</p>
								<a href="{{ urls.barriers.notes.edit( barrier.id, item.id ) }}">edit</a>
							</div>

						{%- else -%}

							<p class="event-list__item__text">{{ item.text | escape | nl2br  }}</p>
							<a href="{{ urls.barriers.notes.edit( barrier.id, item.id ) }}">edit</a>

						{%- endif %}
					{%- endif %}

				{%- elif item.isStatus -%}

					<h4 class="event-list__item__heading">{{ item.date | dateOnly }}<span class="event-list__item__heading__recede"> at {{ item.date | time }} (GMT)</span></h4>

					<p class="event-list__item__text">

					{%- if item.event === 'REPORT_CREATED' -%}

						Barrier started{% if item.user.name %} by <strong>{{ item.user.name }}</strong>{% endif %}

					{%- elif item.event === 'BARRIER_CREATED' -%}

						Barrier added to the service{% if item.user.name %} by <strong>{{ item.user.name }}</strong>{% endif %}

					{%- elif item.event === 'BARRIER_STATUS_CHANGE' -%}

						Barrier status changed from <strong>{{ item.state.from }}</strong> to <strong>{{ item.state.to }}</strong>{{ ' by ' + item.user.name if item.user.name }}.

						{%- if item.state.isResolved %}

							 Resolved date set as <strong>{{ item.state.date | dateOnly( day = false ) }}</strong>.

						{%- endif %}
					{%- endif %}
					</p>

					{% if item.event === 'BARRIER_STATUS_CHANGE' -%}
						<p class="event-list__item__text">{{ item.text | escape | nl2br  }}</p>
					{% endif -%}

				{%- elif item.isPriority -%}

					<h4 class="event-list__item__heading">{{ item.date | dateOnly }}<span class="event-list__item__heading__recede"> at {{ item.date | time }} (GMT)</span></h4>

					<p class="event-list__item__text">
						<span class="priority-marker priority-marker--{{ item.priority.modifyer }}"></span> Barrier priority set to <strong>{{ item.priority.name }}</strong>{{ ' by ' + item.user.name if item.user.name }}.
					</p>

					{%- if item.text %}
						<p class="event-list__item__text">
							 {{ item.text }}
						</p>
						{%- endif %}
				{%- endif %}
			</li>
			{% endfor %}
		</ol>
	{% endif %}
    </section>
{% endblock %}
